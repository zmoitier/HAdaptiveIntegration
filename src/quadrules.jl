struct Quadrature{N,T}
    nodes::Vector{SVector{N,T}}
    weights::Vector{T}
    function Quadrature(nodes::Vector{SVector{N,T}}, weights::Vector{T}) where {N,T}
        @assert length(nodes) == length(weights)
        return new{N,T}(nodes, weights)
    end
end

function (quad::Quadrature)(fct::Function)
    return sum(quad.weights .* fct.(quad.nodes))
end

# https://www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/
# 7 points Gauss rule of order 13
const SEGMENT_G7 = Quadrature(
    [
        SVector(-9.4910791234275852452618968404785126e-01),
        SVector(-7.4153118559939443986386477328078841e-01),
        SVector(-4.0584515137739716690660641207696146e-01),
        SVector(0.0000000000000000000000000000000000e+00),
        SVector(4.0584515137739716690660641207696146e-01),
        SVector(7.4153118559939443986386477328078841e-01),
        SVector(9.4910791234275852452618968404785126e-01),
    ],
    [
        1.2948496616886969327061143267908202e-01
        2.7970539148927666790146777142377958e-01
        3.8183005050511894495036977548897513e-01
        4.1795918367346938775510204081632653e-01
        3.8183005050511894495036977548897513e-01
        2.7970539148927666790146777142377958e-01
        1.2948496616886969327061143267908202e-01
    ],
)
# 15 points Kronrod rule of order 20
const SEGMENT_K15 = Quadrature(
    [
        SVector(-9.4910791234275852452618968404785126e-01),
        SVector(-7.4153118559939443986386477328078841e-01),
        SVector(-4.0584515137739716690660641207696146e-01),
        SVector(0.0000000000000000000000000000000000e+00),
        SVector(4.0584515137739716690660641207696146e-01),
        SVector(7.4153118559939443986386477328078841e-01),
        SVector(9.4910791234275852452618968404785126e-01),
        #
        SVector(-9.9145537112081263920685469752632852e-01),
        SVector(-8.6486442335976907278971278864092620e-01),
        SVector(-5.8608723546769113029414483825872960e-01),
        SVector(-2.0778495500789846760068940377324491e-01),
        SVector(2.0778495500789846760068940377324491e-01),
        SVector(5.8608723546769113029414483825872960e-01),
        SVector(8.6486442335976907278971278864092620e-01),
        SVector(9.9145537112081263920685469752632852e-01),
    ],
    [
        6.3092092629978553290700663189204287e-02,
        1.4065325971552591874518959051023792e-01,
        1.9035057806478540991325640242101368e-01,
        2.0948214108472782801299917489171426e-01,
        1.9035057806478540991325640242101368e-01,
        1.4065325971552591874518959051023792e-01,
        2.2935322010529224963732008058969592e-02,
        2.2935322010529224963732008058969592e-02,
        1.0479001032225018383987632254151802e-01,
        1.6900472663926790282658342659855028e-01,
        2.0443294007529889241416199923464908e-01,
        2.0443294007529889241416199923464908e-01,
        1.6900472663926790282658342659855028e-01,
        1.0479001032225018383987632254151802e-01,
        6.3092092629978553290700663189204287e-02,
    ],
)

# Radon' 7 point rule of order 5 for triangle from
# https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
const TRIANGLE_R5N7 = Quadrature(
    [
        SVector(0.3333333333333333, 0.3333333333333333),
        SVector(0.7974269853530872, 0.1012865073234563),
        SVector(0.1012865073234563, 0.7974269853530872),
        SVector(0.1012865073234563, 0.1012865073234563),
        SVector(0.0597158717897698, 0.4701420641051151),
        SVector(0.4701420641051151, 0.0597158717897698),
        SVector(0.4701420641051151, 0.4701420641051151),
    ],
    [
        0.22500000000000000 / 2,
        0.12593918054482717 / 2,
        0.12593918054482717 / 2,
        0.12593918054482717 / 2,
        0.13239415278850616 / 2,
        0.13239415278850616 / 2,
        0.13239415278850616 / 2,
    ],
)

# Laurie's 19 point rule of order 8 from
# https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
const TRIANGLE_L8N19 = Quadrature(
    [
        SVector(0.3333333333333333, 0.3333333333333333),
        SVector(0.7974269853530872, 0.1012865073234563),
        SVector(0.1012865073234563, 0.7974269853530872),
        SVector(0.1012865073234563, 0.1012865073234563),
        SVector(0.0597158717897698, 0.4701420641051151),
        SVector(0.4701420641051151, 0.0597158717897698),
        SVector(0.4701420641051151, 0.4701420641051151),
        #
        SVector(0.5357953464498992, 0.2321023267750504),
        SVector(0.2321023267750504, 0.5357953464498992),
        SVector(0.2321023267750504, 0.2321023267750504),
        SVector(0.9410382782311209, 0.0294808608844396),
        SVector(0.0294808608844396, 0.9410382782311209),
        SVector(0.0294808608844396, 0.0294808608844396),
        SVector(0.7384168123405100, 0.2321023267750504),
        SVector(0.7384168123405100, 0.0294808608844396),
        SVector(0.2321023267750504, 0.7384168123405100),
        SVector(0.2321023267750504, 0.0294808608844396),
        SVector(0.0294808608844396, 0.7384168123405100),
        SVector(0.0294808608844396, 0.2321023267750504),
    ],
    [
        0.0378610912003147 / 2,
        0.0376204254131829 / 2,
        0.0376204254131829 / 2,
        0.0376204254131829 / 2,
        0.0783573522441174 / 2,
        0.0783573522441174 / 2,
        0.0783573522441174 / 2,
        0.1162714796569659 / 2,
        0.1162714796569659 / 2,
        0.1162714796569659 / 2,
        0.0134442673751655 / 2,
        0.0134442673751655 / 2,
        0.0134442673751655 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
        0.0375097224552317 / 2,
    ],
)
